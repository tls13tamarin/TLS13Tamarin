dnl(
/*
  Server rules for standard handshake.

  From the specification 2. Protocol overview

         Client                                               Server

  Key  ^ ClientHello
  Exch | + key_share*
       v + pre_shared_key*         -------->
                                                         ServerHello  ^ Key
                                                        + key_share*  | Exch
                                                   + pre_shared_key*  v
                                               {EncryptedExtensions}  ^  Server
                                               {CertificateRequest*}  v  Params
                                                      {Certificate*}  ^
                                                {CertificateVerify*}  | Auth
                                                          {Finished}  v
                                   <--------     [Application Data*]
       ^ {Certificate*}
  Auth | {CertificateVerify*}
       v {Finished}                -------->
*/)

rule start_server:
let
    C = $C
    S = $S

    // Initialises all variables to zero.
    init_state()

    tid = ~tid
    sg = $g
in
    [ Fr(tid)
    ]
  --[ Start(tid, S, 'server'),
      running_server(Identity, S)
    ]->
    [
      State(S0, tid, S, C, ServerState)
    ]


/*
    Server receives vanilla ClientHello
*/
dnl Extensions definitions for vanilla ClientHello
define(<!ClientHelloExtensions!>, <!<SupportedVersions, NamedGroupList, SignatureSchemeList, KeyShareCH >!>)
rule recv_client_hello:
let
    set_state()
    psk_ke_mode = 'na'
    g1 = $g1
    g2 = $g2
    client_sg = <g1, g2>
    nc = new_nc
    gx = new_gx
    g = $new_g
    gx = g^new_x

    // Abstract client identity - does not currently correspond to
    // anything concrete
    // From the server's perspective: associate with an open socket.
    C = $C

    // Server identity - can be interpreted as the hostname
    S = $S

    // Server nonce
    ns = ~new_ns

    messages = <messages, ClientHello>

    psk_ke_mode = 'na'

in
    [ In(ClientHello),
      Fr(ns),
      State(S0, tid, S, C, PrevServerState)
    ]
  --[ S0(tid),
      Neq(g1, g2)
    ]->
    [
      State(S1, tid, S, C, ServerState)
    ]

define(<!HelloRetryRequestExtensions!>, <!<KeyShareHRR>!>)
rule hello_retry_request:
let
    // Cannot HRR twice in a handshake
    prev_hrr = '0'
    prev_sg = $prev_sg
    // Copies across all values from PrevServerState to ServerState
    set_state()
    hrr = 'hrr'
    new_g = sg
    g = sg

    C = $C
    S = $S

    messages = <messages, HelloRetryRequest>

in
    [ State(S1, tid, S, C, PrevServerState)
    ]
  --[ S1_retry(tid),
      Neq(prev_g, sg),
      Instance(tid, S, 'server')
    ]->
    [ Out(HelloRetryRequest),
      State(S0, tid, S, C, ServerState)
    ]

/*
    Server sends basic ServerHello
*/
dnl Extensions definitions for vanilla ServerHello
define(<!ServerHelloExtensions!>, <!<SignatureSchemeList, KeyShareSH>!>)
rule server_hello:
let
    prev_g = $prev_g
    prev_gx = prev_g^some_x
    set_state()

    // Server continuing in normal mode (no PSK mode)
    psk_ke_mode = 'na'
    auth_status = <'0', '0'>

    C = $C
    S = $S

    // Group, DH exponent, key share
    y = ~y
    gy = g^y
    gxy = gx^y

    es = EarlySecret
    messages = <messages, ServerHello>
in
    [ State(S1, tid, S, C, PrevServerState),
      Fr(y)
    ]
  --[ S1(tid),
      Eq(g, sg),
      Neq(gx, g),
      Neq(gxy, g),
      Instance(tid, S, 'server'),
      running_server(Nonces, nc, ns),
      DHChal(g, some_x, y, gx, gy, gxy),
      DH(tid, S, y)
    ]->
    [
      State(S2a, tid, S, C, ServerState),
      DHExp(y, tid, S),
      Out(ServerHello)
    ]

rule server_gen_keys:
let
    set_state()

    S = $S
    C = $C

    hs = HandshakeSecret
    ms = MasterSecret

    hs_keys = keygen(handshake_traffic_secret(server), hs_key_label())
    hs_keyc = keygen(handshake_traffic_secret(client), hs_key_label())
in
    [ State(S2a, tid, S, C, PrevServerState),
      DHExp(y, tid, S)
    ]
  --[ S2a(tid),
      MasterSecret(tid, ms),
      Instance(tid, S, 'server'),
      running_server(HS, hs),
      running_server(MS, ms),
      DeleteDH(tid, S, y)
   ]->
    [ State(S2b, tid, S, C, ServerState)
    ]

rule encrypted_extensions:
let
    set_state()

    S = $S
    C = $C

    messages = <messages, EncryptedExtensions>
in
    [ State(S2b, tid, S, C, PrevServerState)
    ]
  --[ S2b(tid),
      Instance(tid, S, 'server')
    ]->
    [ State(S2c, tid, S, C, ServerState),
      Out(senc{EncryptedExtensions}hs_keys)
    ]

rule certificate_request:
let
    prev_psk_ke_mode = 'na'
    set_state()

    S = $S
    C = $C

    certificate_request_context = '0' 
    cert_req = '1' 
    messages = <messages, CertificateRequest>
in
    [ State(S2c, tid, S, C, PrevServerState)
    ]
  --[ S2c_req(tid),
      Instance(tid, S, 'server'),
      running_server(CertReqCtxt, certificate_request_context)
    ]->
    [ State(S2d, tid, S, C, ServerState),
      Out(senc{CertificateRequest}hs_keys)
    ]

rule skip_certificate_request:
let
    set_state()

    cert_req = '0'

    S = $S
    C = $C
in
    [ State(S2c, tid, S, C, PrevServerState)
    ]
  --[ S2c(tid),
      Instance(tid, S, 'server')
    ]->
    [ State(S2d, tid, S, C, ServerState)
    ]

rule server_auth:
let
    set_state()

    C = $C
    S = $S

    certificate_request_context = '0'
    certificate = pk(~ltkS)
    messages = <messages, Certificate>
    signature = compute_signature(~ltkS, server)

    messages = <messages, CertificateVerify>

    verify_data = compute_finished(server)

    messages = <messages, Finished>
    ems = exporter_master_secret()
    cats = application_traffic_secret_0(client)
    sats = application_traffic_secret_0(server)
    app_keys = keygen(sats, app_key_label())

    // auth_status = <sas, cas>
    auth_status = <'auth', '0'>
in
    [ State(S2d, tid, S, C, PrevServerState),
      !Ltk(S, ~ltkS)
    ]
  --[ S2d(tid),
      Instance(tid, S, 'server'),
      Eq(psk_ke_mode, 'na'),
      UseLtk(~ltkS, signature),
      running_server(Transcript, messages)
    ]->
    [ State(S3, tid, S, C, ServerState),
      SendStream(tid, S, C, auth_status, app_keys),
      Out(senc{Certificate, CertificateVerify, Finished}hs_keys)
    ]

rule recv_client_auth:
let
    prev_cert_req = '0'
    set_state()

    C = $C
    S = $S

    exp_verify_data = compute_finished(client)

    messages = <messages, Finished>

    rms = resumption_master_secret()

    app_keyc = keygen(cats, app_key_label())
    app_keys = keygen(sats, app_key_label())
in
    [ State(S3, tid, S, C, PrevServerState),
      In(senc{Finished}hs_keyc)
    ]
  --[ S3(tid),
      Instance(tid, S, 'server'),
      Eq(verify_data, exp_verify_data),
      running_server(Mode, psk_ke_mode),
      commit_server(Identity, C, auth_status),
      commit_server(HS, hs),
      running_server(HSMS, hs, ms),
      running_server(RMS, C, rms, messages),
      commit_server(Transcript, messages),
      commit_server(Nonces, nc, ns),
      SessionKey(tid, S, C, auth_status, <app_keys, app_keyc>)
    ]->
    [ State(S4, tid, S, C, ServerState),
      RecvStream(tid, S, C, auth_status, app_keyc)
    ]


rule recv_client_auth_cert:
let
    prev_cert_req = '1'
    set_state()

    C = $C
    S = $S

    certificate = pk(~ltkC)
    certificate_request_context ='0' 
    messages = <messages, Certificate>

    sig_messages = signature_input(client)
    messages = <messages, CertificateVerify>

    exp_verify_data = compute_finished(client)

    messages = <messages, Finished>
    rms = resumption_master_secret()

    cert_req = '0'
    auth_status = <'auth', 'auth'>

    app_keyc = keygen(cats, app_key_label())
    app_keys = keygen(sats, app_key_label())
in
    [ State(S3, tid, S, C, PrevServerState),
      !Pk(C, pk(~ltkC)),
      SendStream(tid, S, C, prev_auth_status, app_keys),
      In(senc{Certificate, CertificateVerify, Finished}hs_keyc)
    ]
  --[ S3_cert(tid),
      Instance(tid, S, 'server'),
      Eq(verify(signature, sig_messages, pk(~ltkC)), true),
      Eq(verify_data, exp_verify_data),
      running_server(Mode, psk_ke_mode),
      commit_server(Identity, C, auth_status),
      commit_server(HS, hs),
      running_server(HSMS, hs, ms),
      running_server(RMS, C, rms, messages),
      commit_server(Transcript, messages),
      SessionKey(tid, S, C, auth_status, <app_keys, app_keyc>),
      commit_server(Nonces, nc, ns)
    ]->
    [ State(S4, tid, S, C, ServerState),
      SendStream(tid, S, C, auth_status, app_keys),
      RecvStream(tid, S, C, auth_status, app_keyc)
    ]
